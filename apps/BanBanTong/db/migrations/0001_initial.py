# -*- coding: utf-8 -*-
# Generated by Django 1.11.6 on 2017-11-01 08:41
from __future__ import unicode_literals

import BanBanTong.db.models
import datetime
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ActiveTeachers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active_date', models.DateField()),
                ('country_name', models.CharField(blank=True, max_length=100)),
                ('town_name', models.CharField(blank=True, max_length=100)),
                ('school_name', models.CharField(blank=True, max_length=100)),
                ('school_year', models.CharField(max_length=20)),
                ('term_type', models.CharField(max_length=20)),
                ('lesson_name', models.CharField(blank=True, max_length=20)),
                ('grade_name', models.CharField(blank=True, max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Asset',
            fields=[
                ('uuid', models.CharField(default=BanBanTong.db.models._make_uuid, max_length=40, primary_key=True, serialize=False)),
                ('device_model', models.CharField(db_index=True, help_text=b'\xe8\xae\xbe\xe5\xa4\x87\xe5\x9e\x8b\xe5\x8f\xb7', max_length=100)),
                ('number', models.IntegerField(db_index=True, help_text=b'\xe8\xae\xbe\xe5\xa4\x87\xe6\x95\xb0\xe9\x87\x8f')),
                ('asset_from', models.CharField(choices=[('\u6821\u81ea\u4e3b\u91c7\u8d2d', '\u6821\u81ea\u4e3b\u91c7\u8d2d'), ('\u53bf\u7ea7\u7535\u6559\u91c7\u8d2d', '\u53bf\u7ea7\u7535\u6559\u91c7\u8d2d'), ('\u5730\u7ea7\u7535\u6559\u91c7\u8d2d', '\u5730\u7ea7\u7535\u6559\u91c7\u8d2d'), ('\u7701\u7ea7\u7535\u6559\u91c7\u8d2d', '\u7701\u7ea7\u7535\u6559\u91c7\u8d2d'), ('\u5176\u4ed6', '\u5176\u4ed6')], help_text=b'\xe8\xb5\x84\xe4\xba\xa7\xe6\x9d\xa5\xe6\xba\x90', max_length=10)),
                ('reported_by', models.CharField(blank=True, db_index=True, help_text=b'\xe7\x94\xb3\xe6\x8a\xa5\xe7\x94\xa8\xe6\x88\xb7', max_length=20)),
                ('reported_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text=b'\xe7\x94\xb3\xe6\x8a\xa5\xe6\x97\xb6\xe9\x97\xb4')),
                ('status', models.CharField(choices=[('\u5728\u7528', '\u5728\u7528'), ('\u505c\u7528', '\u505c\u7528')], db_index=True, default='\u5728\u7528', help_text=b'\xe8\xb5\x84\xe4\xba\xa7\xe7\x8a\xb6\xe6\x80\x81', max_length=20)),
                ('remark', models.CharField(blank=True, db_index=True, max_length=180)),
            ],
            options={
                'db_table': 'Asset',
            },
        ),
        migrations.CreateModel(
            name='AssetLog',
            fields=[
                ('uuid', models.CharField(default=BanBanTong.db.models._make_uuid, max_length=40, primary_key=True, serialize=False)),
                ('country_name', models.CharField(blank=True, max_length=100)),
                ('town_name', models.CharField(blank=True, max_length=100)),
                ('school_name', models.CharField(max_length=100)),
                ('reported_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('log_type', models.CharField(choices=[('\u65b0\u589e', '\u65b0\u589e'), ('\u505c\u7528', '\u505c\u7528')], db_index=True, help_text=b'\xe7\x94\xb3\xe6\x8a\xa5\xe7\xb1\xbb\xe5\x9e\x8b', max_length=10)),
                ('asset_from', models.CharField(blank=True, choices=[('\u6821\u81ea\u4e3b\u91c7\u8d2d', '\u6821\u81ea\u4e3b\u91c7\u8d2d'), ('\u53bf\u7ea7\u7535\u6559\u91c7\u8d2d', '\u53bf\u7ea7\u7535\u6559\u91c7\u8d2d'), ('\u5730\u7ea7\u7535\u6559\u91c7\u8d2d', '\u5730\u7ea7\u7535\u6559\u91c7\u8d2d'), ('\u7701\u7ea7\u7535\u6559\u91c7\u8d2d', '\u7701\u7ea7\u7535\u6559\u91c7\u8d2d'), ('\u5176\u4ed6', '\u5176\u4ed6')], default=b'', help_text=b'\xe8\xb5\x84\xe4\xba\xa7\xe6\x9d\xa5\xe6\xba\x90', max_length=10)),
                ('device_model', models.CharField(db_index=True, help_text=b'\xe8\xae\xbe\xe5\xa4\x87\xe5\x9e\x8b\xe5\x8f\xb7', max_length=100)),
                ('number', models.IntegerField(db_index=True, help_text=b'\xe8\xae\xbe\xe5\xa4\x87\xe6\x95\xb0\xe9\x87\x8f')),
                ('reported_by', models.CharField(blank=True, db_index=True, help_text=b'\xe7\x94\xb3\xe6\x8a\xa5\xe7\x94\xa8\xe6\x88\xb7', max_length=20, null=True)),
                ('remark', models.CharField(blank=True, db_index=True, max_length=180)),
            ],
            options={
                'db_table': 'AssetLog',
            },
        ),
        migrations.CreateModel(
            name='AssetRepairLog',
            fields=[
                ('uuid', models.CharField(default=BanBanTong.db.models._make_uuid, max_length=40, primary_key=True, serialize=False)),
                ('country_name', models.CharField(blank=True, max_length=100)),
                ('town_name', models.CharField(blank=True, max_length=100)),
                ('school_name', models.CharField(blank=True, max_length=100)),
                ('reported_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('reported_by', models.CharField(blank=True, db_index=True, help_text=b'\xe7\x94\xb3\xe6\x8a\xa5\xe7\x94\xa8\xe6\x88\xb7', max_length=20, null=True)),
                ('device_model', models.CharField(db_index=True, max_length=100)),
                ('grade_name', models.CharField(db_index=True, max_length=20)),
                ('class_name', models.CharField(db_index=True, max_length=20)),
                ('remark', models.CharField(blank=True, db_index=True, max_length=180)),
                ('asset', models.ForeignKey(blank=True, db_column=b'asset_uuid', null=True, on_delete=django.db.models.deletion.SET_NULL, to='db.Asset')),
            ],
            options={
                'db_table': 'AssetRepairLog',
            },
        ),
        migrations.CreateModel(
            name='AssetType',
            fields=[
                ('uuid', models.CharField(default=BanBanTong.db.models._make_uuid, max_length=40, primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, max_length=20)),
                ('icon', models.CharField(max_length=20)),
                ('unit_name', models.CharField(blank=True, help_text=b'\xe6\x95\xb0\xe9\x87\x8f\xe5\x8d\x95\xe4\xbd\x8d', max_length=10)),
                ('cannot_delete', models.BooleanField(default=False)),
                ('deleted', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'AssetType',
            },
        ),
        migrations.CreateModel(
            name='Class',
            fields=[
                ('uuid', models.CharField(default=BanBanTong.db.models._make_uuid, max_length=40, primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, max_length=20)),
                ('number', models.IntegerField(blank=True, db_index=True, default=0)),
                ('last_active_time', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'Class',
            },
        ),
        migrations.CreateModel(
            name='ClassMacV2',
            fields=[
                ('uuid', models.CharField(default=BanBanTong.db.models._make_uuid, max_length=40, primary_key=True, serialize=False)),
                ('mac', models.CharField(blank=True, max_length=64)),
                ('ip', models.CharField(blank=True, max_length=64, null=True)),
                ('class_uuid', models.ForeignKey(db_column=b'class_uuid', on_delete=django.db.models.deletion.CASCADE, to='db.Class')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ClassTime',
            fields=[
                ('uuid', models.CharField(default=BanBanTong.db.models._make_uuid, max_length=40, primary_key=True, serialize=False)),
                ('schedule_time', models.IntegerField()),
                ('assigned_time', models.IntegerField()),
                ('class_uuid', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='db.Class')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ComputerClass',
            fields=[
                ('uuid', models.CharField(default=BanBanTong.db.models._make_uuid, max_length=40, primary_key=True, serialize=False)),
                ('client_number', models.IntegerField(blank=True, default=0)),
                ('class_bind_to', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='db.Class')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ComputerClassLessonRange',
            fields=[
                ('uuid', models.CharField(default=BanBanTong.db.models._make_uuid, max_length=40, primary_key=True, serialize=False)),
                ('computerclass', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.ComputerClass')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CountryToResourcePlatformSyncLog',
            fields=[
                ('created_at', BanBanTong.db.models.BigAutoField(primary_key=True, serialize=False)),
                ('operation_type', models.CharField(max_length=10)),
                ('operation_content', models.TextField(blank=True, default=b'')),
                ('used', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='CountryToSchoolSyncLog',
            fields=[
                ('created_at', BanBanTong.db.models.BigAutoField(primary_key=True, serialize=False)),
                ('operation_type', models.CharField(max_length=10)),
                ('operation_content', models.TextField(blank=True, default=b'')),
                ('used', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='CourseWare',
            fields=[
                ('uuid', models.CharField(default=BanBanTong.db.models._make_uuid, max_length=40, primary_key=True, serialize=False)),
                ('md5', models.CharField(max_length=255, verbose_name='MD5\u9a8c\u8bc1\u7801')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='\u521b\u5efa\u65f6\u95f4')),
                ('title', models.CharField(blank=True, max_length=50, null=True, verbose_name='\u8bfe\u4ef6\u6807\u9898')),
                ('size', models.CharField(blank=True, max_length=20, null=True, verbose_name='\u8bfe\u4ef6\u5927\u5c0f')),
                ('use_times', models.IntegerField(default=0, verbose_name='\u8bfe\u4ef6\u4f7f\u7528\u6b21\u6570')),
                ('download_times', models.IntegerField(default=0, verbose_name='\u8bfe\u4ef6\u4e0b\u8f7d\u6b21\u6570')),
                ('file_name', models.FileField(blank=True, null=True, upload_to=b'upload', verbose_name='\u8bfe\u4ef6\u672c\u5730\u5b58\u50a8')),
                ('qiniu_url', models.CharField(blank=True, max_length=255, null=True, verbose_name='\u4e03\u725b\u5b58\u50a8\u5730\u5740')),
            ],
            options={
                'db_table': 'CourseWare',
            },
        ),
        migrations.CreateModel(
            name='DesktopGlobalPreview',
            fields=[
                ('uuid', models.CharField(default=BanBanTong.db.models._make_uuid, max_length=40, primary_key=True, serialize=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DesktopGlobalPreviewTag',
            fields=[
                ('uuid', models.CharField(default=BanBanTong.db.models._make_uuid, max_length=40, primary_key=True, serialize=False)),
                ('bind_to', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='db.DesktopGlobalPreview')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DesktopPicInfo',
            fields=[
                ('uuid', models.CharField(default=BanBanTong.db.models._make_uuid, max_length=40, primary_key=True, serialize=False)),
                ('school_year', models.CharField(blank=True, max_length=20, null=True)),
                ('term_type', models.CharField(blank=True, max_length=20, null=True)),
                ('grade_number', models.IntegerField()),
                ('class_number', models.IntegerField()),
                ('lesson_name', models.CharField(max_length=20)),
                ('teacher_name', models.CharField(max_length=100)),
                ('lesson_period_sequence', models.IntegerField()),
                ('host', models.CharField(max_length=180)),
                ('url', models.CharField(max_length=180)),
                ('created_at', models.DateTimeField()),
                ('class_uuid', models.ForeignKey(db_column=b'class_uuid', on_delete=django.db.models.deletion.CASCADE, to='db.Class')),
            ],
        ),
        migrations.CreateModel(
            name='DesktopPicInfoTag',
            fields=[
                ('uuid', models.CharField(default=BanBanTong.db.models._make_uuid, max_length=40, primary_key=True, serialize=False)),
                ('bind_to', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='db.DesktopPicInfo')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='db.Class')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Grade',
            fields=[
                ('uuid', models.CharField(default=BanBanTong.db.models._make_uuid, max_length=40, primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, max_length=20)),
                ('number', models.IntegerField(blank=True, db_index=True, default=0)),
            ],
            options={
                'db_table': 'Grade',
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('uuid', models.CharField(default=BanBanTong.db.models._make_uuid, max_length=40, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('group_type', models.CharField(choices=[(b'province', b'province'), (b'city', b'city'), (b'country', b'country'), (b'town', b'town'), (b'school', b'school'), (b'grade', b'grade')], db_index=True, max_length=20)),
                ('parent', models.ForeignKey(blank=True, db_column=b'parent_uuid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='child_set', to='db.Group')),
            ],
            options={
                'db_table': 'Group',
            },
        ),
        migrations.CreateModel(
            name='GroupTB',
            fields=[
                ('group_id', models.IntegerField(db_column=b'group_id', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, max_length=30)),
                ('parent', models.ForeignKey(blank=True, db_column=b'parent_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='child_set', to='db.GroupTB')),
            ],
            options={
                'db_table': 'GroupTB',
            },
        ),
        migrations.CreateModel(
            name='LessonName',
            fields=[
                ('uuid', models.CharField(default=BanBanTong.db.models._make_uuid, max_length=40, primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, max_length=20)),
                ('deleted', models.BooleanField(default=False)),
                ('types', models.CharField(blank=True, max_length=50, null=True)),
                ('school', models.ForeignKey(db_column=b'school_uuid', on_delete=django.db.models.deletion.CASCADE, to='db.Group')),
            ],
            options={
                'db_table': 'LessonName',
            },
        ),
        migrations.CreateModel(
            name='LessonPeriod',
            fields=[
                ('uuid', models.CharField(default=BanBanTong.db.models._make_uuid, max_length=40, primary_key=True, serialize=False)),
                ('sequence', models.IntegerField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
            ],
            options={
                'ordering': ['-term__start_date', 'sequence'],
                'db_table': 'LessonPeriod',
            },
        ),
        migrations.CreateModel(
            name='LessonSchedule',
            fields=[
                ('uuid', models.CharField(default=BanBanTong.db.models._make_uuid, max_length=40, primary_key=True, serialize=False)),
                ('weekday', models.CharField(choices=[(b'mon', '\u661f\u671f\u4e00'), (b'tue', '\u661f\u671f\u4e8c'), (b'wed', '\u661f\u671f\u4e09'), (b'thu', '\u661f\u671f\u56db'), (b'fri', '\u661f\u671f\u4e94'), (b'sat', '\u661f\u671f\u516d'), (b'sun', '\u661f\u671f\u5929')], max_length=10)),
                ('class_uuid', models.ForeignKey(db_column=b'class_uuid', on_delete=django.db.models.deletion.CASCADE, to='db.Class')),
                ('lesson_name', models.ForeignKey(db_column=b'lesson_name_uuid', on_delete=django.db.models.deletion.CASCADE, to='db.LessonName')),
                ('lesson_period', models.ForeignKey(db_column=b'lesson_period_uuid', on_delete=django.db.models.deletion.CASCADE, to='db.LessonPeriod')),
            ],
            options={
                'db_table': 'LessonSchedule',
            },
        ),
        migrations.CreateModel(
            name='LessonTeacher',
            fields=[
                ('uuid', models.CharField(default=BanBanTong.db.models._make_uuid, max_length=40, primary_key=True, serialize=False)),
                ('schedule_time', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(2147483647), django.core.validators.MinValueValidator(0)])),
                ('finished_time', models.IntegerField(blank=True, db_index=True, default=0, validators=[django.core.validators.MaxValueValidator(2147483647), django.core.validators.MinValueValidator(0)])),
                ('login_time', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(2147483647), django.core.validators.MinValueValidator(0)])),
                ('class_uuid', models.ForeignKey(db_column=b'class_uuid', on_delete=django.db.models.deletion.CASCADE, to='db.Class')),
                ('lesson_name', models.ForeignKey(db_column=b'lesson_name_uuid', on_delete=django.db.models.deletion.CASCADE, to='db.LessonName')),
            ],
            options={
                'ordering': ['-class_uuid__grade__term__school_year', 'class_uuid__grade__term__term_type', 'class_uuid__grade__name', 'class_uuid__name', 'lesson_name'],
                'db_table': 'LessonTeacher',
            },
        ),
        migrations.CreateModel(
            name='NewLessonName',
            fields=[
                ('uuid', models.CharField(default=BanBanTong.db.models._make_uuid, max_length=40, primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, max_length=20)),
                ('deleted', models.BooleanField(default=False)),
                ('country', models.ForeignKey(db_column=b'country_uuid', on_delete=django.db.models.deletion.CASCADE, to='db.Group')),
            ],
            options={
                'db_table': 'NewLessonName',
            },
        ),
        migrations.CreateModel(
            name='NewLessonNameType',
            fields=[
                ('uuid', models.CharField(default=BanBanTong.db.models._make_uuid, max_length=40, primary_key=True, serialize=False)),
                ('newlessonname', models.ForeignKey(db_column=b'newlessonname_uuid', on_delete=django.db.models.deletion.CASCADE, to='db.NewLessonName')),
            ],
            options={
                'db_table': 'NewLessonNameType',
            },
        ),
        migrations.CreateModel(
            name='NewLessonType',
            fields=[
                ('uuid', models.CharField(default=BanBanTong.db.models._make_uuid, max_length=40, primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, max_length=20)),
                ('remark', models.CharField(blank=True, max_length=255, null=True)),
                ('country', models.ForeignKey(db_column=b'country_uuid', on_delete=django.db.models.deletion.CASCADE, to='db.Group')),
            ],
            options={
                'db_table': 'NewLessonType',
            },
        ),
        migrations.CreateModel(
            name='NewTerm',
            fields=[
                ('uuid', models.CharField(default=BanBanTong.db.models._make_uuid, max_length=40, primary_key=True, serialize=False)),
                ('school_year', models.CharField(db_index=True, max_length=20)),
                ('term_type', models.CharField(choices=[('\u6625\u5b63\u5b66\u671f', '\u6625\u5b63\u5b66\u671f'), ('\u79cb\u5b63\u5b66\u671f', '\u79cb\u5b63\u5b66\u671f')], db_index=True, max_length=20)),
                ('start_date', models.DateField(db_index=True)),
                ('end_date', models.DateField(db_index=True)),
                ('deleted', models.BooleanField(default=False)),
                ('schedule_time', models.IntegerField(default=0, help_text=b'\xe8\xae\xa1\xe5\x88\x92\xe8\xbe\xbe\xe6\xa0\x87\xe8\xaf\xbe\xe6\x97\xb6/\xe7\x8f\xad\xe7\xba\xa7', validators=[django.core.validators.MaxValueValidator(2147483647), django.core.validators.MinValueValidator(0)])),
                ('country', models.ForeignKey(db_column=b'country_uuid', on_delete=django.db.models.deletion.CASCADE, to='db.Group')),
            ],
            options={
                'db_table': 'NewTerm',
            },
        ),
        migrations.CreateModel(
            name='Node',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=20)),
                ('host', models.CharField(blank=True, max_length=255)),
                ('communicate_key', models.CharField(db_index=True, max_length=16, unique=True)),
                ('activation_number', models.IntegerField(blank=True, default=0, verbose_name='\u53bf\u7ea7\u5206\u914d\u7684\u6fc0\u6d3b\u53ef\u7528\u7ec8\u7aef\u6570\u91cf')),
                ('session_key', models.CharField(blank=True, max_length=128)),
                ('last_upload_id', models.BigIntegerField(blank=True, default=0, null=True)),
                ('last_save_id', models.BigIntegerField(blank=True, default=0, null=True)),
                ('remark', models.CharField(blank=True, max_length=180)),
                ('last_active_time', models.DateTimeField(blank=True, default=None, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_upload_time', models.DateTimeField(blank=True, default=None, null=True)),
                ('db_version', models.IntegerField(default=0)),
                ('sync_status', models.SmallIntegerField(default=0)),
            ],
            options={
                'db_table': 'Node',
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('uuid', models.CharField(default=BanBanTong.db.models._make_uuid, max_length=40, primary_key=True, serialize=False)),
                ('resource_from', models.CharField(db_index=True, max_length=50)),
                ('resource_type', models.CharField(choices=[('\u97f3\u9891', '\u97f3\u9891'), ('\u97f3\u89c6\u9891', '\u97f3\u89c6\u9891'), ('PPT \u5e7b\u706f\u7247', 'PPT \u5e7b\u706f\u7247'), ('\u6587\u6863', '\u6587\u6863'), ('\u52a8\u753b\u7247', '\u52a8\u753b\u7247'), ('\u5176\u5b83', '\u5176\u5b83')], db_index=True, max_length=20)),
                ('remark', models.CharField(blank=True, db_index=True, max_length=180)),
            ],
            options={
                'db_table': 'Resource',
            },
        ),
        migrations.CreateModel(
            name='ResourceFrom',
            fields=[
                ('uuid', models.CharField(default=BanBanTong.db.models._make_uuid, max_length=40, primary_key=True, serialize=False)),
                ('value', models.CharField(db_index=True, max_length=50)),
                ('remark', models.CharField(blank=True, max_length=180)),
                ('country', models.ForeignKey(db_column=b'country_uuid', on_delete=django.db.models.deletion.CASCADE, to='db.Group')),
            ],
        ),
        migrations.CreateModel(
            name='ResourceType',
            fields=[
                ('uuid', models.CharField(default=BanBanTong.db.models._make_uuid, max_length=40, primary_key=True, serialize=False)),
                ('value', models.CharField(db_index=True, max_length=20)),
                ('remark', models.CharField(blank=True, max_length=180)),
                ('country', models.ForeignKey(db_column=b'country_uuid', on_delete=django.db.models.deletion.CASCADE, to='db.Group')),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('uuid', models.CharField(default=BanBanTong.db.models._make_uuid, max_length=40, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('remark', models.CharField(blank=True, db_index=True, max_length=180)),
            ],
            options={
                'db_table': 'Role',
            },
        ),
        migrations.CreateModel(
            name='RolePrivilege',
            fields=[
                ('uuid', models.CharField(default=BanBanTong.db.models._make_uuid, max_length=40, primary_key=True, serialize=False)),
                ('privilege', models.CharField(max_length=50)),
                ('role', models.ForeignKey(db_column=b'role_uuid', on_delete=django.db.models.deletion.CASCADE, to='db.Role')),
            ],
            options={
                'db_table': 'RolePrivilege',
            },
        ),
        migrations.CreateModel(
            name='SchoolPost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='\u6807\u9898')),
                ('content', models.TextField(blank=True, null=True, verbose_name='\u5185\u5bb9')),
                ('active', models.BooleanField(default=False, verbose_name='\u662f\u5426\u542f\u7528')),
                ('create_date', models.DateTimeField(auto_now_add=True, verbose_name='\u521b\u5efa\u65f6\u95f4')),
                ('update_date', models.DateTimeField(auto_now=True, null=True, verbose_name='\u66f4\u65b0\u65f6\u95f4')),
                ('expire_date', models.DateTimeField(blank=True, null=True, verbose_name='\u8fc7\u671f\u65f6\u95f4')),
            ],
        ),
        migrations.CreateModel(
            name='Setting',
            fields=[
                ('uuid', models.CharField(default=BanBanTong.db.models._make_uuid, max_length=40, primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, max_length=100)),
                ('value', models.CharField(blank=True, max_length=1024)),
            ],
            options={
                'db_table': 'Setting',
            },
        ),
        migrations.CreateModel(
            name='Statistic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('term', models.CharField(blank=True, max_length=40, null=True)),
                ('school_year', models.CharField(db_index=True, max_length=20)),
                ('term_type', models.CharField(choices=[('\u6625\u5b63\u5b66\u671f', '\u6625\u5b63\u5b66\u671f'), ('\u79cb\u5b63\u5b66\u671f', '\u79cb\u5b63\u5b66\u671f')], db_index=True, max_length=20)),
                ('key', models.CharField(blank=True, max_length=400)),
                ('name', models.CharField(db_index=True, max_length=100)),
                ('type', models.CharField(choices=[(b'province', b'province'), (b'city', b'city'), (b'country', b'country'), (b'town', b'town'), (b'school', b'school'), (b'grade', b'grade'), (b'class', b'class'), (b'lesson', b'lesson'), (b'teacher', b'teacher')], db_index=True, max_length=20)),
                ('class_count', models.IntegerField(blank=True, default=0)),
                ('teach_count', models.IntegerField(blank=True, default=0)),
                ('teach_time', models.IntegerField(blank=True, default=0)),
                ('teacher_num', models.IntegerField(blank=True, default=0)),
                ('last_update_count', models.DateTimeField(default=datetime.datetime.now)),
                ('last_update_time', models.DateTimeField(default=datetime.datetime.now)),
                ('last_update_num', models.DateTimeField(default=datetime.datetime.now)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='child_set', to='db.Statistic')),
            ],
        ),
        migrations.CreateModel(
            name='SyllabusGrade',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.CharField(db_index=True, max_length=20)),
                ('term_type', models.CharField(choices=[('\u6625\u5b63\u5b66\u671f', '\u6625\u5b63\u5b66\u671f'), ('\u79cb\u5b63\u5b66\u671f', '\u79cb\u5b63\u5b66\u671f')], db_index=True, max_length=20)),
                ('grade_name', models.CharField(db_index=True, max_length=20)),
                ('in_use', models.BooleanField(help_text=b'\xe6\x98\xaf\xe5\x90\xa6\xe5\xb7\xb2\xe5\x90\xaf\xe7\x94\xa8')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SyllabusGradeLesson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lesson_name', models.CharField(db_index=True, help_text=b'\xe8\xaf\xad\xe6\x96\x87\xef\xbc\x8c\xe6\x95\xb0\xe5\xad\xa6...', max_length=20)),
                ('publish', models.CharField(blank=True, help_text=b'\xe4\xba\xba\xe6\xb0\x91\xe6\x95\x99\xe8\x82\xb2\xe5\x87\xba\xe7\x89\x88\xe7\xa4\xbe\xef\xbc\x8c\xe6\xb9\x96\xe5\x8c\x97\xe6\x95\x99\xe8\x82\xb2\xe5\x87\xba\xe7\x89\x88\xe7\xa4\xbe', max_length=20)),
                ('edition', models.CharField(help_text=b'\xe4\xba\xba\xe6\x95\x99\xe7\x89\x88\xef\xbc\x8c\xe9\x84\x82\xe6\x95\x99\xe7\x89\x88...', max_length=20)),
                ('bookversion', models.CharField(blank=True, help_text=b'200301-2(2003\xe5\xb9\xb41\xe6\x9c\x88\xe7\xac\xac2\xe7\x89\x88)\xef\xbc\x8c200202-5(2002\xe5\xb9\xb42\xe6\x9c\x88\xe7\xac\xac5\xe7\x89\x88)...', max_length=20)),
                ('volume', models.CharField(blank=True, max_length=10, null=True)),
                ('picture_host', models.CharField(help_text=b'\xe6\x95\x99\xe6\x9d\x90\xe5\xb0\x81\xe9\x9d\xa2', max_length=180)),
                ('picture_url', models.CharField(help_text=b'\xe6\x95\x99\xe6\x9d\x90CIP\xe6\x88\xaa\xe5\x9b\xbe', max_length=180)),
                ('remark', models.CharField(blank=True, max_length=180)),
                ('in_use', models.BooleanField(default=False, help_text=b'\xe6\x98\xaf\xe5\x90\xa6\xe5\xb7\xb2\xe5\x90\xaf\xe7\x94\xa8')),
                ('syllabus_grade', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.SyllabusGrade')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SyllabusGradeLessonContent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seq', models.FloatField(blank=True, help_text=b'\xe4\xb8\x80\xe7\xba\xa7\xe7\x9b\xae\xe5\xbd\x95\xe5\xba\x8f\xe5\x8f\xb7', null=True)),
                ('subseq', models.FloatField(blank=True, help_text=b'\xe4\xba\x8c\xe7\xba\xa7\xe7\x9b\xae\xe5\xbd\x95\xe5\xba\x8f\xe5\x8f\xb7', null=True)),
                ('title', models.CharField(help_text=b'\xe6\x95\x99\xe6\x9d\x90\xe5\xa4\xa7\xe7\xba\xb2\xe6\xa0\x87\xe9\xa2\x98', max_length=100)),
                ('parent', models.ForeignKey(blank=True, help_text=b'\xe4\xb8\x8a\xe7\xba\xa7\xe7\x9b\xae\xe5\xbd\x95', null=True, on_delete=django.db.models.deletion.CASCADE, to='db.SyllabusGradeLessonContent')),
                ('syllabus_grade_lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.SyllabusGradeLesson')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SyncLog',
            fields=[
                ('created_at', BanBanTong.db.models.BigAutoField(primary_key=True, serialize=False)),
                ('operation_type', models.CharField(max_length=10)),
                ('operation_content', models.TextField(blank=True, default=b'')),
            ],
            options={
                'db_table': 'SyncLog',
            },
        ),
        migrations.CreateModel(
            name='SyncLogTemp',
            fields=[
                ('id', BanBanTong.db.models.BigAutoField(primary_key=True, serialize=False)),
                ('data', models.TextField()),
                ('node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.Node')),
            ],
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('uuid', models.CharField(default=BanBanTong.db.models._make_uuid, max_length=40, primary_key=True, serialize=False)),
                ('sequence', models.IntegerField(default=BanBanTong.db.models._create_teacher_sequence)),
                ('name', models.CharField(db_index=True, help_text=b'\xe5\xa7\x93\xe5\x90\x8d', max_length=100)),
                ('password', models.CharField(blank=True, max_length=128)),
                ('sex', models.CharField(choices=[(b'female', '\u5973'), (b'male', '\u7537')], default=b'male', max_length=20)),
                ('edu_background', models.CharField(max_length=50)),
                ('birthday', models.DateField()),
                ('title', models.CharField(blank=True, help_text=b'\xe6\x95\x99\xe5\xb8\x88\xe8\x81\x8c\xe7\xa7\xb0', max_length=50)),
                ('mobile', models.CharField(blank=True, max_length=20)),
                ('qq', models.CharField(blank=True, max_length=20)),
                ('remark', models.CharField(blank=True, max_length=180)),
                ('register_at', models.DateField(auto_now_add=True)),
                ('deleted', models.BooleanField(default=False)),
                ('school', models.ForeignKey(db_column=b'school_uuid', on_delete=django.db.models.deletion.CASCADE, related_name='school_teacher_set', to='db.Group')),
            ],
            options={
                'ordering': ['sequence'],
                'verbose_name_plural': 'Teacher',
                'db_table': 'Teacher',
                'verbose_name': 'Teacher',
            },
        ),
        migrations.CreateModel(
            name='TeacherAbsentLog',
            fields=[
                ('uuid', models.CharField(default=BanBanTong.db.models._make_uuid, max_length=40, primary_key=True, serialize=False)),
                ('teacher_name', models.CharField(max_length=100)),
                ('lesson_name', models.CharField(max_length=20)),
                ('province_name', models.CharField(max_length=100)),
                ('city_name', models.CharField(max_length=100)),
                ('country_name', models.CharField(blank=True, max_length=100)),
                ('town_name', models.CharField(blank=True, max_length=100)),
                ('school_name', models.CharField(max_length=100)),
                ('term_school_year', models.CharField(max_length=20)),
                ('term_type', models.CharField(max_length=20)),
                ('term_start_date', models.DateField()),
                ('term_end_date', models.DateField()),
                ('grade_name', models.CharField(max_length=20)),
                ('class_name', models.CharField(max_length=20)),
                ('lesson_period_sequence', models.IntegerField()),
                ('lesson_period_start_time', models.TimeField()),
                ('lesson_period_end_time', models.TimeField()),
                ('weekday', models.CharField(choices=[(b'mon', '\u661f\u671f\u4e00'), (b'tue', '\u661f\u671f\u4e8c'), (b'wed', '\u661f\u671f\u4e09'), (b'thu', '\u661f\u671f\u56db'), (b'fri', '\u661f\u671f\u4e94'), (b'sat', '\u661f\u671f\u516d'), (b'sun', '\u661f\u671f\u5929')], max_length=10)),
                ('created_at', models.DateTimeField()),
                ('city', models.ForeignKey(db_column=b'city_uuid', on_delete=django.db.models.deletion.CASCADE, related_name='city_teacherabsentlog_set', to='db.Group')),
                ('class_uuid', models.ForeignKey(db_column=b'class_uuid', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='class_teacherabsentlog_set', to='db.Class')),
                ('country', models.ForeignKey(db_column=b'country_uuid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='country_teacherabsentlog_set', to='db.Group')),
                ('grade', models.ForeignKey(db_column=b'grade_uuid', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='grade_teacherabsentlog_set', to='db.Grade')),
                ('lesson_period', models.ForeignKey(db_column=b'lesson_period_uuid', null=True, on_delete=django.db.models.deletion.SET_NULL, to='db.LessonPeriod')),
                ('lesson_teacher', models.ForeignKey(db_column=b'lesson_teacher_uuid', null=True, on_delete=django.db.models.deletion.SET_NULL, to='db.LessonTeacher')),
                ('province', models.ForeignKey(db_column=b'province_uuid', on_delete=django.db.models.deletion.CASCADE, related_name='province_teacherabsentlog_set', to='db.Group')),
                ('school', models.ForeignKey(db_column=b'school_uuid', on_delete=django.db.models.deletion.CASCADE, related_name='school_teacherabsentlog_set', to='db.Group')),
                ('teacher', models.ForeignKey(db_column=b'teacher_uuid', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='teacherabsentlog_set', to='db.Teacher')),
            ],
            options={
                'ordering': ['-created_at'],
                'db_table': 'TeacherAbsentLog',
            },
        ),
        migrations.CreateModel(
            name='TeacherLoginCountWeekly',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.CharField(blank=True, max_length=20, null=True)),
                ('term_type', models.CharField(blank=True, max_length=20, null=True)),
                ('town_name', models.CharField(db_index=True, max_length=100)),
                ('school_name', models.CharField(db_index=True, max_length=100)),
                ('grade_name', models.CharField(db_index=True, max_length=20)),
                ('class_name', models.CharField(db_index=True, max_length=20)),
                ('week', models.IntegerField(db_index=True, default=0)),
                ('lesson_count', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='TeacherLoginLog',
            fields=[
                ('uuid', models.CharField(default=BanBanTong.db.models._make_uuid, max_length=40, primary_key=True, serialize=False)),
                ('teacher_name', models.CharField(max_length=100)),
                ('lesson_name', models.CharField(max_length=20)),
                ('province_name', models.CharField(max_length=100)),
                ('city_name', models.CharField(max_length=100)),
                ('country_name', models.CharField(blank=True, max_length=100)),
                ('town_name', models.CharField(blank=True, max_length=100)),
                ('school_name', models.CharField(max_length=100)),
                ('term_school_year', models.CharField(max_length=20)),
                ('term_type', models.CharField(max_length=20)),
                ('term_start_date', models.DateField()),
                ('term_end_date', models.DateField()),
                ('grade_name', models.CharField(max_length=20)),
                ('class_name', models.CharField(max_length=20)),
                ('lesson_period_sequence', models.IntegerField()),
                ('lesson_period_start_time', models.TimeField()),
                ('lesson_period_end_time', models.TimeField()),
                ('weekday', models.CharField(choices=[(b'mon', '\u661f\u671f\u4e00'), (b'tue', '\u661f\u671f\u4e8c'), (b'wed', '\u661f\u671f\u4e09'), (b'thu', '\u661f\u671f\u56db'), (b'fri', '\u661f\u671f\u4e94'), (b'sat', '\u661f\u671f\u516d'), (b'sun', '\u661f\u671f\u5929')], max_length=10)),
                ('created_at', models.DateTimeField()),
                ('resource_from', models.CharField(blank=True, max_length=50)),
                ('resource_type', models.CharField(blank=True, choices=[('\u97f3\u9891', '\u97f3\u9891'), ('\u97f3\u89c6\u9891', '\u97f3\u89c6\u9891'), ('PPT \u5e7b\u706f\u7247', 'PPT \u5e7b\u706f\u7247'), ('\u6587\u6863', '\u6587\u6863'), ('\u52a8\u753b\u7247', '\u52a8\u753b\u7247'), ('\u5176\u5b83', '\u5176\u5b83')], max_length=20)),
                ('login_time', models.IntegerField(blank=True, default=0)),
                ('city', models.ForeignKey(db_column=b'city_uuid', on_delete=django.db.models.deletion.CASCADE, related_name='city_teacherloginlog_set', to='db.Group')),
                ('class_uuid', models.ForeignKey(db_column=b'class_uuid', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='class_teacherloginlog_set', to='db.Class')),
                ('country', models.ForeignKey(db_column=b'country_uuid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='country_teacherloginlog_set', to='db.Group')),
                ('grade', models.ForeignKey(db_column=b'grade_uuid', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='grade_teacherloginlog_set', to='db.Grade')),
                ('lesson_period', models.ForeignKey(db_column=b'lesson_period_uuid', null=True, on_delete=django.db.models.deletion.SET_NULL, to='db.LessonPeriod')),
                ('lesson_teacher', models.ForeignKey(db_column=b'lesson_teacher_uuid', null=True, on_delete=django.db.models.deletion.SET_NULL, to='db.LessonTeacher')),
                ('province', models.ForeignKey(db_column=b'province_uuid', on_delete=django.db.models.deletion.CASCADE, related_name='province_teacherloginlog_set', to='db.Group')),
                ('school', models.ForeignKey(db_column=b'school_uuid', on_delete=django.db.models.deletion.CASCADE, related_name='school_teacherloginlog_set', to='db.Group')),
                ('teacher', models.ForeignKey(db_column=b'teacher_uuid', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='teacherloginlog_set', to='db.Teacher')),
            ],
            options={
                'db_table': 'TeacherLoginLog',
            },
        ),
        migrations.CreateModel(
            name='TeacherLoginLogCourseWare',
            fields=[
                ('uuid', models.CharField(default=BanBanTong.db.models._make_uuid, max_length=40, primary_key=True, serialize=False)),
                ('school_year', models.CharField(blank=True, max_length=20, null=True)),
                ('term_type', models.CharField(blank=True, max_length=20, null=True)),
                ('courseware', models.ForeignKey(db_column=b'courseware_uuid', on_delete=django.db.models.deletion.CASCADE, to='db.CourseWare')),
                ('teacherloginlog', models.ForeignKey(db_column=b'teacherloginlog_uuid', on_delete=django.db.models.deletion.CASCADE, to='db.TeacherLoginLog')),
            ],
            options={
                'db_table': 'TeacherLoginLogCourseWare',
            },
        ),
        migrations.CreateModel(
            name='TeacherLoginLogLessonContent',
            fields=[
                ('uuid', models.CharField(default=BanBanTong.db.models._make_uuid, max_length=40, primary_key=True, serialize=False)),
                ('school_year', models.CharField(blank=True, max_length=20, null=True)),
                ('term_type', models.CharField(blank=True, max_length=20, null=True)),
                ('title', models.CharField(blank=True, max_length=100, null=True, verbose_name='\u5927\u7eb2\u6807\u9898')),
                ('lessoncontent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='db.SyllabusGradeLessonContent')),
                ('teacherloginlog', models.OneToOneField(db_column=b'teacherloginlog_uuid', on_delete=django.db.models.deletion.CASCADE, to='db.TeacherLoginLog')),
            ],
            options={
                'db_table': 'TeacherLoginLogLessonContent',
            },
        ),
        migrations.CreateModel(
            name='TeacherLoginLogTag',
            fields=[
                ('uuid', models.CharField(default=BanBanTong.db.models._make_uuid, max_length=40, primary_key=True, serialize=False)),
                ('bind_to', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.TeacherLoginLog')),
                ('created_at', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.Class')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TeacherLoginTime',
            fields=[
                ('uuid', models.CharField(default=BanBanTong.db.models._make_uuid, max_length=40, primary_key=True, serialize=False)),
                ('school_year', models.CharField(blank=True, max_length=20, null=True)),
                ('term_type', models.CharField(blank=True, max_length=20, null=True)),
                ('login_time', models.IntegerField()),
                ('teacherloginlog', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='db.TeacherLoginLog')),
            ],
        ),
        migrations.CreateModel(
            name='TeacherLoginTimeCache',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.CharField(blank=True, max_length=20, null=True)),
                ('term_type', models.CharField(blank=True, max_length=20, null=True)),
                ('lesson_name', models.CharField(db_index=True, max_length=20)),
                ('class_uuid', models.ForeignKey(db_column=b'class_uuid', on_delete=django.db.models.deletion.CASCADE, to='db.Class')),
                ('grade', models.ForeignKey(db_column=b'grade_uuid', on_delete=django.db.models.deletion.CASCADE, to='db.Grade')),
                ('school', models.ForeignKey(db_column=b'school_uuid', on_delete=django.db.models.deletion.CASCADE, related_name='school_teacherlogintimecache_set', to='db.Group')),
                ('teacher', models.ForeignKey(db_column=b'teacher_uuid', on_delete=django.db.models.deletion.CASCADE, to='db.Teacher')),
                ('teacherlogintime', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='db.TeacherLoginTime')),
                ('town', models.ForeignKey(db_column=b'town_uuid', on_delete=django.db.models.deletion.CASCADE, related_name='town_teacherlogintimecache_set', to='db.Group')),
            ],
        ),
        migrations.CreateModel(
            name='TeacherLoginTimeTemp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('login_time', models.IntegerField()),
                ('last_login_datetime', models.DateTimeField(default=None, null=True)),
                ('teacherloginlog', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='db.TeacherLoginLog')),
            ],
        ),
        migrations.CreateModel(
            name='TeacherLoginTimeWeekly',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.CharField(blank=True, max_length=20, null=True)),
                ('term_type', models.CharField(blank=True, max_length=20, null=True)),
                ('town_name', models.CharField(db_index=True, max_length=100)),
                ('school_name', models.CharField(db_index=True, max_length=100)),
                ('grade_name', models.CharField(db_index=True, max_length=20)),
                ('class_name', models.CharField(db_index=True, max_length=20)),
                ('week', models.IntegerField(db_index=True, default=0)),
                ('total_time', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Term',
            fields=[
                ('uuid', models.CharField(default=BanBanTong.db.models._make_uuid, max_length=40, primary_key=True, serialize=False)),
                ('school_year', models.CharField(db_index=True, max_length=20)),
                ('term_type', models.CharField(choices=[('\u6625\u5b63\u5b66\u671f', '\u6625\u5b63\u5b66\u671f'), ('\u79cb\u5b63\u5b66\u671f', '\u79cb\u5b63\u5b66\u671f')], db_index=True, max_length=20)),
                ('start_date', models.DateField(db_index=True)),
                ('end_date', models.DateField(db_index=True)),
                ('deleted', models.BooleanField(default=False)),
                ('schedule_time', models.IntegerField(blank=True, default=0, help_text=b'\xe8\xae\xa1\xe5\x88\x92\xe8\xbe\xbe\xe6\xa0\x87\xe8\xaf\xbe\xe6\x97\xb6')),
                ('school', models.ForeignKey(db_column=b'school_uuid', on_delete=django.db.models.deletion.CASCADE, to='db.Group')),
            ],
            options={
                'db_table': 'Term',
            },
        ),
        migrations.CreateModel(
            name='Token',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token_type', models.CharField(choices=[(b'lesson_start', b'lesson_start'), (b'node_sync', b'node_sync'), (b'user_login', b'user_login')], db_index=True, max_length=20)),
                ('value', models.CharField(db_index=True, max_length=128)),
                ('info', models.TextField(blank=True, default=b'')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'Token',
            },
        ),
        migrations.CreateModel(
            name='TotalTeachersCountry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country_name', models.CharField(db_index=True, max_length=100)),
                ('total', models.IntegerField(default=0)),
                ('term', models.ForeignKey(db_column=b'term_uuid', default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='db.Term')),
            ],
        ),
        migrations.CreateModel(
            name='TotalTeachersGrade',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country_name', models.CharField(db_index=True, max_length=100)),
                ('town_name', models.CharField(db_index=True, max_length=100)),
                ('school_name', models.CharField(db_index=True, max_length=100)),
                ('grade_name', models.CharField(db_index=True, max_length=20)),
                ('total', models.IntegerField(default=0)),
                ('term', models.ForeignKey(db_column=b'term_uuid', default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='db.Term')),
            ],
        ),
        migrations.CreateModel(
            name='TotalTeachersLesson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country_name', models.CharField(db_index=True, max_length=100)),
                ('town_name', models.CharField(db_index=True, max_length=100)),
                ('school_name', models.CharField(db_index=True, max_length=100)),
                ('lesson_name', models.CharField(db_index=True, max_length=20)),
                ('total', models.IntegerField(default=0)),
                ('term', models.ForeignKey(db_column=b'term_uuid', default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='db.Term')),
            ],
        ),
        migrations.CreateModel(
            name='TotalTeachersLessonGrade',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('town_name', models.CharField(db_index=True, max_length=100)),
                ('school_name', models.CharField(db_index=True, max_length=100)),
                ('lesson_name', models.CharField(db_index=True, max_length=20)),
                ('grade_name', models.CharField(db_index=True, max_length=20)),
                ('total', models.IntegerField(default=0)),
                ('term', models.ForeignKey(db_column=b'term_uuid', default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='db.Term')),
            ],
        ),
        migrations.CreateModel(
            name='TotalTeachersSchool',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country_name', models.CharField(db_index=True, max_length=100)),
                ('town_name', models.CharField(db_index=True, max_length=100)),
                ('school_name', models.CharField(db_index=True, max_length=100)),
                ('total', models.IntegerField(default=0)),
                ('term', models.ForeignKey(db_column=b'term_uuid', default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='db.Term')),
            ],
        ),
        migrations.CreateModel(
            name='TotalTeachersTown',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country_name', models.CharField(db_index=True, max_length=100)),
                ('town_name', models.CharField(db_index=True, max_length=100)),
                ('total', models.IntegerField(default=0)),
                ('term', models.ForeignKey(db_column=b'term_uuid', default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='db.Term')),
            ],
        ),
        migrations.CreateModel(
            name='UsbkeyTeacher',
            fields=[
                ('usbkey_uuid', models.CharField(db_column=b'usbkey_uuid', db_index=True, max_length=180, primary_key=True, serialize=False)),
                ('teacher_uuid', models.CharField(db_column=b'teacher_uuid', db_index=True, max_length=40)),
                ('sync_uploaded', models.BooleanField(db_index=True, default=False)),
            ],
            options={
                'db_table': 'usbkey_teachers',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('uuid', models.CharField(default=BanBanTong.db.models._make_uuid, max_length=40, primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=20)),
                ('password', BanBanTong.db.models.PasswordCharField(blank=True, max_length=128)),
                ('realname', models.CharField(blank=True, default=b'', max_length=100)),
                ('sex', models.CharField(blank=True, choices=[(b'female', '\u5973'), (b'male', '\u7537')], db_index=True, default=b'male', max_length=20)),
                ('qq', models.CharField(blank=True, default=b'', max_length=20)),
                ('mobile', models.CharField(blank=True, default=b'', max_length=20)),
                ('email', models.CharField(blank=True, default=b'', max_length=200)),
                ('status', models.CharField(choices=[(b'active', '\u5df2\u6fc0\u6d3b'), (b'suspended', '\u5df2\u7981\u7528')], default=b'active', max_length=20)),
                ('level', models.CharField(choices=[(b'province', '\u7701\u7ea7'), (b'city', '\u5e02\u7ea7'), (b'country', '\u4e61\u7ea7'), (b'town', '\u53bf\u7ea7'), (b'school', '\u6821\u7ea7')], default=b'school', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('remark', models.CharField(blank=True, db_index=True, max_length=180)),
            ],
            options={
                'db_table': 'User',
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
        ),
        migrations.CreateModel(
            name='UserPermittedGroup',
            fields=[
                ('uuid', models.CharField(default=BanBanTong.db.models._make_uuid, max_length=40, primary_key=True, serialize=False)),
                ('group', models.ForeignKey(db_column=b'group_uuid', on_delete=django.db.models.deletion.CASCADE, to='db.Group')),
                ('user', models.ForeignKey(db_column=b'user_uuid', on_delete=django.db.models.deletion.CASCADE, to='db.User')),
            ],
            options={
                'db_table': 'UserPermittedGroup',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='permitted_groups',
            field=models.ManyToManyField(through='db.UserPermittedGroup', to='db.Group'),
        ),
        migrations.AddField(
            model_name='user',
            name='role',
            field=models.ForeignKey(blank=True, db_column=b'role_uuid', null=True, on_delete=django.db.models.deletion.SET_NULL, to='db.Role'),
        ),
        migrations.AddField(
            model_name='teacherlogintimeweekly',
            name='term',
            field=models.ForeignKey(db_column=b'term_uuid', on_delete=django.db.models.deletion.CASCADE, to='db.Term'),
        ),
        migrations.AddField(
            model_name='teacherloginlog',
            name='term',
            field=models.ForeignKey(db_column=b'term_uuid', null=True, on_delete=django.db.models.deletion.SET_NULL, to='db.Term'),
        ),
        migrations.AddField(
            model_name='teacherloginlog',
            name='town',
            field=models.ForeignKey(db_column=b'town_uuid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='town_teacherloginlog_set', to='db.Group'),
        ),
        migrations.AddField(
            model_name='teacherlogincountweekly',
            name='term',
            field=models.ForeignKey(db_column=b'term_uuid', on_delete=django.db.models.deletion.CASCADE, to='db.Term'),
        ),
        migrations.AddField(
            model_name='teacherabsentlog',
            name='term',
            field=models.ForeignKey(db_column=b'term_uuid', null=True, on_delete=django.db.models.deletion.SET_NULL, to='db.Term'),
        ),
        migrations.AddField(
            model_name='teacherabsentlog',
            name='town',
            field=models.ForeignKey(db_column=b'town_uuid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='town_teacherabsentlog_set', to='db.Group'),
        ),
        migrations.AddField(
            model_name='newlessonnametype',
            name='newlessontype',
            field=models.ForeignKey(db_column=b'newlessontype_uuid', on_delete=django.db.models.deletion.CASCADE, to='db.NewLessonType'),
        ),
        migrations.AddField(
            model_name='newlessonname',
            name='lesson_type',
            field=models.ManyToManyField(through='db.NewLessonNameType', to='db.NewLessonType'),
        ),
        migrations.AddField(
            model_name='lessonteacher',
            name='teacher',
            field=models.ForeignKey(db_column=b'teacher_uuid', on_delete=django.db.models.deletion.CASCADE, to='db.Teacher'),
        ),
        migrations.AddField(
            model_name='lessonperiod',
            name='term',
            field=models.ForeignKey(db_column=b'term_uuid', on_delete=django.db.models.deletion.CASCADE, to='db.Term'),
        ),
        migrations.AddField(
            model_name='grade',
            name='term',
            field=models.ForeignKey(db_column=b'term_uuid', on_delete=django.db.models.deletion.CASCADE, to='db.Term'),
        ),
        migrations.AddField(
            model_name='desktoppicinfo',
            name='grade',
            field=models.ForeignKey(db_column=b'grade_uuid', on_delete=django.db.models.deletion.CASCADE, to='db.Grade'),
        ),
        migrations.AddField(
            model_name='desktoppicinfo',
            name='school',
            field=models.ForeignKey(db_column=b'school_uuid', on_delete=django.db.models.deletion.CASCADE, to='db.Group'),
        ),
        migrations.AddField(
            model_name='desktopglobalpreview',
            name='pic',
            field=models.ForeignKey(db_column=b'pic_uuid', on_delete=django.db.models.deletion.CASCADE, to='db.DesktopPicInfo'),
        ),
        migrations.AddField(
            model_name='courseware',
            name='teacherloginlog',
            field=models.ManyToManyField(through='db.TeacherLoginLogCourseWare', to='db.TeacherLoginLog'),
        ),
        migrations.AddField(
            model_name='computerclasslessonrange',
            name='lessonname',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.LessonName'),
        ),
        migrations.AddField(
            model_name='computerclass',
            name='lesson_range',
            field=models.ManyToManyField(blank=True, through='db.ComputerClassLessonRange', to='db.LessonName'),
        ),
        migrations.AddField(
            model_name='class',
            name='grade',
            field=models.ForeignKey(db_column=b'grade_uuid', on_delete=django.db.models.deletion.CASCADE, to='db.Grade'),
        ),
        migrations.AddField(
            model_name='class',
            name='teacher',
            field=models.ForeignKey(blank=True, db_column=b'teacher_uuid', null=True, on_delete=django.db.models.deletion.CASCADE, to='db.Teacher'),
        ),
        migrations.AddField(
            model_name='assettype',
            name='school',
            field=models.ForeignKey(blank=True, db_column=b'school_uuid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='school_assettype_set', to='db.Group'),
        ),
        migrations.AddField(
            model_name='assetrepairlog',
            name='asset_type',
            field=models.ForeignKey(db_column=b'asset_type_uuid', on_delete=django.db.models.deletion.CASCADE, to='db.AssetType'),
        ),
        migrations.AddField(
            model_name='assetrepairlog',
            name='school',
            field=models.ForeignKey(blank=True, db_column=b'school_uuid', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='school_assetrepairlog_set', to='db.Group'),
        ),
        migrations.AddField(
            model_name='assetrepairlog',
            name='town',
            field=models.ForeignKey(blank=True, db_column=b'town_uuid', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='town_assetrepairlog_set', to='db.Group'),
        ),
        migrations.AddField(
            model_name='assetlog',
            name='asset_type',
            field=models.ForeignKey(db_column=b'asset_type_uuid', on_delete=django.db.models.deletion.CASCADE, to='db.AssetType'),
        ),
        migrations.AddField(
            model_name='assetlog',
            name='school',
            field=models.ForeignKey(blank=True, db_column=b'school_uuid', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='school_assetlog_set', to='db.Group'),
        ),
        migrations.AddField(
            model_name='assetlog',
            name='town',
            field=models.ForeignKey(blank=True, db_column=b'town_uuid', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='town_assetlog_set', to='db.Group'),
        ),
        migrations.AddField(
            model_name='asset',
            name='asset_type',
            field=models.ForeignKey(db_column=b'asset_type_uuid', on_delete=django.db.models.deletion.CASCADE, to='db.AssetType'),
        ),
        migrations.AddField(
            model_name='asset',
            name='related_asset',
            field=models.ForeignKey(blank=True, db_column=b'related_asset_uuid', help_text=b'\xe5\x81\x9c\xe7\x94\xa8\xe8\xae\xbe\xe5\xa4\x87\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\x9c\xa8\xe7\x94\xa8\xe6\x89\xb9\xe6\xac\xa1uuid', null=True, on_delete=django.db.models.deletion.SET_NULL, to='db.Asset'),
        ),
        migrations.AddField(
            model_name='asset',
            name='school',
            field=models.ForeignKey(db_column=b'school_uuid', on_delete=django.db.models.deletion.CASCADE, to='db.Group'),
        ),
        migrations.AddField(
            model_name='activeteachers',
            name='teacher',
            field=models.ForeignKey(db_column=b'teacher_uuid', on_delete=django.db.models.deletion.CASCADE, to='db.Teacher'),
        ),
        migrations.AlterIndexTogether(
            name='totalteacherslessongrade',
            index_together=set([('lesson_name', 'grade_name')]),
        ),
        migrations.AlterIndexTogether(
            name='term',
            index_together=set([('school_year', 'term_type')]),
        ),
        migrations.AlterIndexTogether(
            name='teacherlogintimeweekly',
            index_together=set([('school_year', 'term_type', 'town_name', 'school_name', 'grade_name', 'class_name', 'week')]),
        ),
        migrations.AlterIndexTogether(
            name='teacherlogintimecache',
            index_together=set([('school_year', 'term_type')]),
        ),
        migrations.AlterIndexTogether(
            name='teacherlogintime',
            index_together=set([('school_year', 'term_type')]),
        ),
        migrations.AlterIndexTogether(
            name='teacherloginloglessoncontent',
            index_together=set([('school_year', 'term_type')]),
        ),
        migrations.AlterIndexTogether(
            name='teacherloginlogcourseware',
            index_together=set([('school_year', 'term_type')]),
        ),
        migrations.AlterIndexTogether(
            name='teacherloginlog',
            index_together=set([('term_school_year', 'term_type', 'town_name', 'school_name', 'resource_from'), ('term_school_year', 'term_type', 'town_name', 'school_name', 'resource_type'), ('term_school_year', 'term_type', 'town_name', 'school_name', 'grade_name', 'class_name', 'lesson_name', 'teacher_name', 'lesson_period_sequence'), ('created_at', 'town_name', 'school_name', 'resource_type'), ('created_at', 'town_name', 'resource_type'), ('created_at', 'town_name', 'school_name', 'grade_name', 'class_name', 'lesson_name', 'teacher_name', 'lesson_period_sequence'), ('created_at', 'town_name', 'resource_from'), ('created_at', 'town_name', 'school_name', 'resource_from'), ('term_school_year', 'term_type', 'town_name', 'resource_type'), ('term_school_year', 'term_type', 'town_name', 'resource_from')]),
        ),
        migrations.AlterIndexTogether(
            name='teacherlogincountweekly',
            index_together=set([('school_year', 'term_type', 'town_name', 'school_name', 'grade_name', 'class_name', 'week')]),
        ),
        migrations.AlterIndexTogether(
            name='teacherabsentlog',
            index_together=set([('term_school_year', 'term_type', 'town_name', 'school_name', 'grade_name', 'class_name', 'lesson_name', 'teacher_name', 'lesson_period_sequence'), ('created_at', 'town_name', 'school_name', 'grade_name', 'class_name', 'lesson_name', 'teacher_name', 'lesson_period_sequence')]),
        ),
        migrations.AlterUniqueTogether(
            name='teacher',
            unique_together=set([('name', 'birthday', 'school')]),
        ),
        migrations.AlterIndexTogether(
            name='statistic',
            index_together=set([('school_year', 'term_type')]),
        ),
        migrations.AlterUniqueTogether(
            name='resourcetype',
            unique_together=set([('country', 'value')]),
        ),
        migrations.AlterUniqueTogether(
            name='resourcefrom',
            unique_together=set([('country', 'value')]),
        ),
        migrations.AlterUniqueTogether(
            name='lessonteacher',
            unique_together=set([('class_uuid', 'teacher', 'lesson_name')]),
        ),
        migrations.AlterUniqueTogether(
            name='lessonschedule',
            unique_together=set([('class_uuid', 'lesson_period', 'weekday')]),
        ),
        migrations.AlterUniqueTogether(
            name='lessonperiod',
            unique_together=set([('term', 'sequence')]),
        ),
        migrations.AlterUniqueTogether(
            name='lessonname',
            unique_together=set([('school', 'name')]),
        ),
        migrations.AlterIndexTogether(
            name='desktoppicinfo',
            index_together=set([('created_at', 'class_uuid', 'lesson_period_sequence'), ('school_year', 'term_type')]),
        ),
        migrations.AlterUniqueTogether(
            name='class',
            unique_together=set([('name', 'grade')]),
        ),
        migrations.AlterIndexTogether(
            name='activeteachers',
            index_together=set([('school_year', 'term_type', 'town_name', 'school_name', 'grade_name'), ('active_date', 'teacher', 'town_name', 'school_name', 'grade_name')]),
        ),
    ]
